"use client";
import React, { useEffect } from "react";
import MainLayout from "../layout/MainLayout";
import Head from "next/head";
import { Provider } from "react-redux";
import store from "../redux/features/store";
import { SessionProvider } from "next-auth/react";

import "../../public/assets/css/bootstrap.min.css";
import "../../public/assets/css/bootstrap-icons.css";
import "../../public/assets/css/fontawesome.min.css";
import "../../public/assets/css/boxicons.min.css";
import "../../public/assets/css/all.min.css";
import "../../public/assets/css/swiper-bundle.min.css";
import "../../public/assets/css/nice-select.css";
import "../../public/assets/css/animate.min.css";
import "../../public/assets/css/style.css";
import "../../public/admin-assets/scss/main.scss";
import { Toaster } from "react-hot-toast";
import { ThemeProvider } from "@mui/material/styles";
import theme from "../theme/theme";
import { CssBaseline } from '@mui/material';
import CustomLoading from "../components/CustomLoading.js";
import socketIO from "socket.io-client";
const ENDPOINT = process.env.NEXT_PUBLIC_SOCKET_SERVER_URI || "";
const socketId = socketIO(ENDPOINT, { transports: ["websocket"] });

export default function App({ Component, pageProps }) {
  useEffect(() => {
    import("../../public/assets/js/bootstrap.min.js");
    import("../../public/assets/css/fontawesome.min.css");
  }, []);

  useEffect(() => {
    socketId.on("connection", () => {});
  }, []);

  return (
    <>
      <Head>
        <title>Beautime | Health & Beauty Store</title>
        <meta charSet="UTF-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="../../public/assets/img/sm-logo.svg" />
      </Head>
      <Provider store={store}>
        <SessionProvider>
          <ThemeProvider theme={theme}>
          <CssBaseline />
            <MainLayout>
              <CustomLoading>
                <Component {...pageProps} />
              </CustomLoading>
            </MainLayout>
            <Toaster position="top-center" reverseOrder={false} />
          </ThemeProvider>
        </SessionProvider>
      </Provider>
    </>
  );
}

// const Custom = ({ children }) => {
//   const { isLoading, data } = useLoadUserQuery({});

//   return (
//     <div>
//       {isLoading ? (
//         <Loader />
//       ) : (
//         <div>{children}</div>
//       )}
//     </div>
//   );
// };
